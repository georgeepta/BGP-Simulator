import psycopg2
from collections import Counter
from flask_restful import Resource, reqparse



class ASVulnerabilityRequestHandler(Resource):

    def connect_to_db(self, db_name, user, password, host, port):
        # establishing the connection
        conn = psycopg2.connect(
            database=db_name, user=user, password=password, host=host, port=port
        )

        '''
        psycopg2 is Python DB API-compliant, so the auto-commit feature is off by default. 
        We need to set conn.autocommit to True to commit any pending transaction to the database.
        '''
        conn.autocommit = True

        return conn


    def fetch_sim_results(self, simulation_uuid, conn):
        # Creating a cursor object using the cursor() method
        cursor = conn.cursor()

        # Retrieving data
        cursor.execute('''SELECT simulation_results FROM BGP_HIJACKING_SIMULATIONS WHERE simulation_id=%s''',
                       (simulation_uuid,))

        # return all rows from the table as json array
        return cursor.fetchall()[0][0]


    def compute_AS_vuln_ranking_after_hijack(self, sim_results, n_most_common=1000):
        AS_vuln_list = []
        for result in sim_results:
            AS_vuln_list.append(result['after_hijack']['list_of_nodes_with_hijacked_path_to_hijacker_prefix'])
        return dict(Counter([item for sublist in AS_vuln_list for item in sublist]).most_common(n_most_common))


    def get(self):
        req_parser = reqparse.RequestParser()
        req_parser.add_argument('simulation_uuid', type=str, help="Simulation UUID, is required to retrieve all the results of the simulation and afterwards to compute the AS vulnerability Ranking for this simulation")
        req_data = req_parser.parse_args()

        simulation_uuid = req_data['simulation_uuid']

        '''
        create a connection to the database
        '''
        conn = self.connect_to_db("bgp_simulator", 'gepta', '1821', '127.0.0.1', '5432')

        '''
        Fetch simulation data & produce the ranking
        '''
        print("AS Vulnerability Ranking: In Progress ...")
        sim_results = self.fetch_sim_results(simulation_uuid, conn)
        as_vuln_ranking = self.compute_AS_vuln_ranking_after_hijack(sim_results)
        print("AS Vulnerability Ranking: Completed!")

        '''
        close connection to database
        '''
        conn.close()

        return as_vuln_ranking